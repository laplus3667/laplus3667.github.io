const pages = JSON.parse('[{"revision":"81cd48ed6c506b072c01c60d3ad16d00","url":"https://laplus3667.github.io/zh-tw/posts/mur047-%E8%A7%80%E5%85%89sergey-levine%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E8%AA%B2%E7%A8%8B/"},{"revision":"a74dbcb35ee06db2c5314e7ff0d9268f","url":"https://laplus3667.github.io/zh-tw/posts/"},{"revision":"861711179d6e82dbffb8ae916fa33174","url":"https://laplus3667.github.io/zh-tw/series/"},{"revision":"7583ef16a0e1773b488dc60e944e0e59","url":"https://laplus3667.github.io/zh-tw/tags/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/series/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/"},{"revision":"b5a8aa20a49b186692f4206e7ce6fa34","url":"https://laplus3667.github.io/zh-tw/posts/mur046-%E7%A5%9E%E3%81%A3%E3%81%BD%E3%81%84%E3%81%AA/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/vocaloid/"},{"revision":"37a7203263efe8651e2280c09ce7924a","url":"https://laplus3667.github.io/zh-tw/posts/mur045-%E9%87%8D%E6%96%B0%E8%A8%AD%E8%A8%88obsidian%E5%82%99%E5%BF%98%E7%B3%BB%E7%B5%B1/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/obsidian/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/series/%E5%AD%B8%E8%A1%93%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"revision":"1a8452ec6f3ddad9e63150c7bd6a3e63","url":"https://laplus3667.github.io/zh-tw/categories/"},{"revision":"394ac081770412bcc1140a4c4f9977e3","url":"https://laplus3667.github.io/zh-tw/posts/mur044-%E7%89%B9%E5%BE%B5%E5%B7%A5%E7%A8%8B%E7%9A%84%E4%BA%94%E7%A8%AE%E9%A1%9E%E5%9E%8B%E8%88%87%E5%9B%9B%E7%A8%AE%E8%A1%A1%E9%87%8F/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E7%89%B9%E5%BE%B5%E5%B7%A5%E7%A8%8B/"},{"revision":"c6163b161835f0bb0e1ec5e8c3f70e16","url":"https://laplus3667.github.io/zh-tw/posts/mur043-%E5%B9%B3%E8%A1%A1%E5%BD%B1%E9%9F%BF%E4%BB%A5%E8%A8%93%E7%B7%B4%E5%85%AC%E5%B9%B3%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF/"},{"revision":"17512cc7988c026ac09736974acaca72","url":"https://laplus3667.github.io/zh-tw/posts/mur042-%E6%B7%B1%E6%80%9D%E5%AD%B8%E8%A1%93%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E8%BC%B8%E5%87%BA%E4%B8%89%E6%B3%95/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E5%AD%B8%E8%A1%93%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E5%AF%AB%E4%BD%9C/"},{"revision":"cdb6c1ae08a4261e0bfa7e67e18db338","url":"https://laplus3667.github.io/zh-tw/posts/mur041-%E5%90%88%E6%88%90%E6%95%B8%E6%93%9A%E5%A6%82%E4%BD%95%E5%A2%9E%E5%BC%B7%E4%BF%A1%E7%94%A8%E9%A0%90%E6%B8%AC/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E5%90%88%E6%88%90%E6%95%B8%E6%93%9A/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E9%87%91%E8%9E%8D%E7%A7%91%E6%8A%80/"},{"revision":"c178844f3a7a5aa90ac27d7bdad201f2","url":"https://laplus3667.github.io/zh-tw/posts/mur040-%E5%B7%A5%E4%BD%9C%E6%BA%9D%E9%80%9A%E5%AF%AB%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%9B%E9%9A%8E%E6%AE%B5/"},{"revision":"60b79ffa8dfa3473bb1452a268c0626a","url":"https://laplus3667.github.io/zh-tw/posts/mur039-%E6%80%9D%E8%80%83%E5%8F%A5%E5%AD%90%E7%9A%84%E5%8D%A1%E7%89%87%E7%AD%86%E8%A8%98%E7%B3%BB%E7%B5%B1/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E8%AA%9E%E8%A8%80%E5%AD%B8/"},{"revision":"433f29c2bf42148734b91f1acb5799b5","url":"https://laplus3667.github.io/zh-tw/posts/mur038-%E7%94%B1%E5%BE%8C%E9%A9%97%E5%8F%96%E6%A8%A3%E5%AD%B8%E7%BF%92%E6%9C%80%E5%84%AA%E5%8C%96/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E8%B2%9D%E6%B0%8F%E6%80%9D%E7%B6%AD/"},{"revision":"13deb711f51d4b616283230c363eee34","url":"https://laplus3667.github.io/zh-tw/posts/mur037-%E8%AE%80%E5%B1%B1%E5%8F%A3%E6%8B%93%E9%83%8E%E7%9A%84%E6%91%98%E8%A6%81%E5%8A%9B/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E5%B1%B1%E5%8F%A3%E6%8B%93%E9%83%8E/"},{"revision":"fa44f215aea4b37c75b10f9b3fb64bdc","url":"https://laplus3667.github.io/zh-tw/posts/mur036-%E5%90%88%E6%88%90%E6%95%B8%E6%93%9A%E7%9A%84%E5%85%AD%E7%A8%AE%E6%96%B9%E6%B3%95/"},{"revision":"bd69f5c14cc130f05e969e274b31a0f9","url":"https://laplus3667.github.io/zh-tw/posts/mur035-%E8%AE%80%E5%A4%A7%E5%89%8D%E7%A0%94%E4%B8%80%E6%89%80%E6%95%98%E4%BA%8B%E7%9A%84%E9%87%91%E8%9E%8D%E7%A7%91%E6%8A%80/"},{"revision":"ec721c501db5cf7f47c957d97f18d177","url":"https://laplus3667.github.io/zh-tw/posts/mur034-%E4%BD%9C%E7%82%BA%E5%8F%AF%E9%87%8D%E7%94%A8%E5%8D%80%E5%A1%8A%E7%9A%84python%E5%87%BD%E6%95%B8/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/python/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%B7%A8%E7%A8%8B/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/series/%E7%B7%A8%E7%A8%8B%E6%80%9D%E7%B6%AD/"},{"revision":"76e33450b25acd167651e4206be6d81c","url":"https://laplus3667.github.io/zh-tw/posts/mur033-%E5%A6%82%E4%BD%95%E8%A1%A1%E9%87%8F%E5%90%88%E6%88%90%E6%95%B8%E6%93%9A%E7%9A%84%E7%9C%9F%E5%AF%A6%E6%80%A7%E8%88%87%E6%BA%96%E7%A2%BA%E6%80%A7/"},{"revision":"d4a6dc6cab104590ffbc888ff43d19dc","url":"https://laplus3667.github.io/zh-tw/posts/mur032-%E6%80%9D%E8%80%83information-ratio/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/datacamp/"},{"revision":"8049ff62c97954897256736f7bfd911e","url":"https://laplus3667.github.io/zh-tw/posts/mur031-dataframe%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A4%8E/"},{"revision":"0ee00e9c8c0ef908c580b66e43032b5f","url":"https://laplus3667.github.io/zh-tw/posts/mur030-%E7%A8%8B%E5%BC%8F%E4%BA%A4%E6%98%93%E5%85%A5%E9%96%80/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E6%BC%94%E7%AE%97%E6%B3%95%E4%BA%A4%E6%98%93/"},{"revision":"15b37e98d0b09b4c96c84cae30dcaf36","url":"https://laplus3667.github.io/zh-tw/posts/mur029-%E6%80%9D%E8%80%83%E6%B0%B4%E5%B9%B3%E8%81%AF%E9%82%A6%E5%AD%B8%E7%BF%92/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E5%8F%AF%E4%BF%A1%E4%BB%BB%E7%9A%84ai/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E8%81%AF%E9%82%A6%E5%AD%B8%E7%BF%92/"},{"revision":"87d50f458c9e20ac39b421a7f4696b80","url":"https://laplus3667.github.io/zh-tw/posts/mur028-bregman%E9%9E%85%E9%9B%86%E4%B8%AD%E4%B8%8D%E7%AD%89%E5%BC%8F%E5%9F%BA%E7%A4%8E/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E6%96%87%E7%8D%BB%E9%96%B1%E8%AE%80/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E9%9E%85%E9%9B%86%E4%B8%AD%E4%B8%8D%E7%AD%89%E5%BC%8F/"},{"revision":"4fe2c809b9f9a738a1cb6033cee64238","url":"https://laplus3667.github.io/zh-tw/posts/mur027-%E7%B3%BB%E7%B5%B1%E6%80%9D%E8%80%83%E5%AD%90%E5%8F%A5%E7%90%86%E8%AB%96/"},{"revision":"d4edaed93b9276397bb7e6fd93cc7006","url":"https://laplus3667.github.io/zh-tw/posts/mur026-%E8%AE%80%E5%B1%B1%E5%8F%A3%E6%8B%93%E9%83%8E%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%AF%AB%E4%BD%9C%E6%B3%95/"},{"revision":"23306949481528d81cfc6a96160d6e0c","url":"https://laplus3667.github.io/zh-tw/posts/mur025%E6%80%9D%E8%80%83%E4%BF%84%E8%AA%9E%E7%AC%AC%E4%B8%89%E6%A0%BC/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E4%BF%84%E8%AA%9E/"},{"revision":"6d3b919775b4d2dce163af45dfb05b48","url":"https://laplus3667.github.io/zh-tw/posts/mur024%E6%80%9D%E8%80%83%E8%AA%BF%E5%BC%8F%E8%88%87%E9%A2%A8%E6%A0%BC/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E9%9F%B3%E6%A8%82/"},{"revision":"8ee8f79d136dc98523874b1180863405","url":"https://laplus3667.github.io/zh-tw/posts/mur023%E9%B3%A5%E7%9E%B0%E9%87%91%E8%9E%8D%E9%A2%A8%E9%9A%AA%E7%AE%A1%E7%90%86%E8%88%87%E5%90%88%E6%88%90%E6%95%B8%E6%93%9A/"},{"revision":"1c7727f7d4e34a6e627e87c98f109a7c","url":"https://laplus3667.github.io/zh-tw/posts/mur022%E6%96%87%E7%8D%BB%E7%B6%9C%E8%BF%B0%E8%A9%95%E7%9A%84%E4%B9%9D%E5%80%8B%E4%BB%BB%E5%8B%99/"},{"revision":"a298bf0fd7168fc2694992df40337547","url":"https://laplus3667.github.io/zh-tw/posts/mur021-%E8%B2%9D%E5%BC%8F%E5%8B%95%E6%85%8B%E5%AE%9A%E5%83%B9%E5%9F%BA%E7%A4%8E/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/series/%E5%8B%95%E6%85%8B%E5%AE%9A%E5%83%B9/"},{"revision":"6132a3d8315b5bba51e14b5cd0a1fff8","url":"https://laplus3667.github.io/zh-tw/posts/mur020-%E6%B2%88%E6%80%9D%E8%BC%B8%E5%85%A5-%E8%99%95%E7%90%86-%E8%BC%B8%E5%87%BA%E6%A8%A1%E5%9E%8B/"},{"revision":"0f55f7dd56b018e38c751f9679e36da0","url":"https://laplus3667.github.io/zh-tw/posts/mur019-%E5%BE%9E%E5%B9%BC%E5%A5%B3%E6%88%B0%E8%A8%98%E6%80%9D%E8%80%83%E8%98%87%E5%BE%B7%E6%88%B0%E7%88%AD/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E5%B9%BC%E5%A5%B3%E6%88%B0%E8%A8%98/"},{"revision":"4456ec71e326b2d2bb593942bfd0a8d4","url":"https://laplus3667.github.io/zh-tw/posts/mur018-%E6%B2%88%E6%80%9Dpython%E5%BB%BA%E6%A7%8B%E5%BC%8F/"},{"revision":"591d4d0fc8e99dbc5cbcc4966ebd27cb","url":"https://laplus3667.github.io/zh-tw/posts/mur017-%E6%80%9D%E8%80%83%E9%9F%B3%E7%A8%8B%E8%88%87%E9%9F%B3%E9%9A%8E/"},{"revision":"37f42e287b555700b461e4efd793e2cd","url":"https://laplus3667.github.io/zh-tw/posts/mur016%E6%80%9D%E8%80%83chase%E5%90%88%E6%88%90%E6%95%B8%E6%93%9A%E6%8A%80%E8%A1%93%E7%B4%B0%E7%AF%80/"},{"revision":"b5726547719d0667bf294ab5575a156f","url":"https://laplus3667.github.io/zh-tw/posts/mur015%E5%BE%9E%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E6%80%9D%E8%80%83%E7%B7%9A%E6%80%A7%E8%BF%B4%E6%AD%B8%E5%88%86%E6%9E%90/"},{"revision":"0256151daf12ab011dfab05b027b77d5","url":"https://laplus3667.github.io/zh-tw/posts/mur014%E5%BE%9E%E5%AD%B8%E7%BF%922do%E8%BB%9F%E9%AB%94%E5%8F%8D%E6%80%9D%E5%80%8B%E4%BA%BA%E5%AD%B8%E8%A1%93%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"revision":"7546ce6a7599e7e28db2b43b27967b21","url":"https://laplus3667.github.io/zh-tw/posts/mur013%E6%80%9D%E8%80%83obsidian%E5%A4%96%E6%8E%9Btemplater/"},{"revision":"7d5491ac581f9f8fe154f6a69769f473","url":"https://laplus3667.github.io/zh-tw/posts/mur012%E5%90%88%E6%88%90%E6%95%B8%E6%93%9A%E6%96%BCchase%E7%9A%84%E9%87%91%E8%9E%8D%E6%87%89%E7%94%A8/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/bash/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/educative-%E8%AA%B2%E7%A8%8B/"},{"revision":"68ca28a80d1ae6bbf58993f79a7a6675","url":"https://laplus3667.github.io/zh-tw/posts/mur011%E6%A0%B8%E5%BF%83bash%E7%9F%A5%E8%AD%98/"},{"revision":"85c5aaf87c1e00e2ebec311645502c97","url":"https://laplus3667.github.io/zh-tw/posts/mur010%E5%85%A8%E6%96%B0%E6%80%9D%E7%B6%AD%E8%A3%A1%E7%9A%84%E4%B8%89%E6%84%9F%E4%B8%89%E5%8A%9B/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E5%BE%97%E5%88%B0%E8%81%BD%E6%9B%B8/"},{"revision":"501081a877230b288958f77c74ea7f1f","url":"https://laplus3667.github.io/zh-tw/posts/mur009%E8%A9%95%E8%AB%96%E8%88%87%E6%96%87%E6%AA%94/"},{"revision":"e6bc9d2e1b0e3abc8153e9493a55c4d0","url":"https://laplus3667.github.io/zh-tw/posts/mur008%E8%AE%80%E8%94%A1%E9%88%BA%E5%95%86%E6%A5%AD%E5%8F%83%E8%80%83%E7%99%BC%E5%88%8A%E8%A9%9E-%E7%90%86%E8%A7%A3%E5%95%86%E6%A5%AD-%E8%88%87%E4%B8%96%E7%95%8C%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E5%95%86%E6%A5%AD%E5%8F%83%E8%80%83/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E5%BE%97%E5%88%B0%E8%AA%B2%E7%A8%8B/"},{"revision":"f4285035806ede6e3e34e559bc51976a","url":"https://laplus3667.github.io/zh-tw/posts/mur007%E6%B8%85%E5%96%AE%E9%AB%94/"},{"revision":"2ebe4108bfd58ed0f012583cc5c88ca5","url":"https://laplus3667.github.io/zh-tw/posts/mur006%E5%B7%AE%E5%88%86%E9%9A%B1%E7%A7%81%E5%B0%8B%E6%A0%B9/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E5%B7%AE%E5%88%86%E9%9A%B1%E7%A7%81/"},{"revision":"97cf4270e3941fb88a8f087552efb5dc","url":"https://laplus3667.github.io/zh-tw/posts/mur005%E5%90%88%E6%88%90%E6%95%B8%E6%93%9A%E5%A6%82%E4%BD%95%E9%97%9C%E8%81%AF%E5%81%B5%E6%B8%AC%E8%A9%90%E6%AC%BA/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E8%A9%90%E6%AC%BA%E5%81%B5%E6%B8%AC/"},{"revision":"5c460bba0de15b20a89dfa446a7c89ee","url":"https://laplus3667.github.io/zh-tw/posts/mur004%E7%9F%A5%E8%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E4%BA%94%E5%80%8B%E8%A7%92%E5%BA%A6/"},{"revision":"9bfb6c01ed797edd99a14e5ac3520064","url":"https://laplus3667.github.io/zh-tw/posts/mur003%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%B7%AE%E5%88%86%E9%9A%B1%E7%A7%81%E6%A9%9F%E5%88%B6%E7%9A%84%E5%9B%9B%E5%80%8B%E9%9D%A2%E5%90%91/"},{"revision":"085d28eb26ea2847ffb90e4878aa832c","url":"https://laplus3667.github.io/zh-tw/posts/mur002%E9%97%9C%E6%96%BC%E5%A4%A7%E6%99%A6%E6%97%A5%E7%9A%84%E4%BA%94%E5%80%8B%E7%9F%A5%E8%AD%98%E9%BB%9E/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/categories/%E6%97%A5%E6%9C%AC/"},{"revision":"6f650ced2de85cf8f072f9325ed215c1","url":"https://laplus3667.github.io/zh-tw/posts/mur001%E6%AF%8F%E6%97%A5%E5%AF%AB%E6%96%87%E7%AB%A0%E7%9A%84%E4%BA%94%E5%80%8B%E5%BF%83%E6%B3%95/"},{"revision":"529cdfd76a04b7c39afa52668bbeac0f","url":"https://laplus3667.github.io/zh-tw/posts/rdd001-%E7%A0%94%E7%A9%B6%E8%A8%AD%E8%A8%88%E7%B3%BB%E5%88%97%E5%B0%8E%E6%96%87/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/series/%E7%A0%94%E7%A9%B6%E8%A8%AD%E8%A8%88/"},{"revision":"d2247ef22f4f5d41f00fe41cce4e8310","url":"https://laplus3667.github.io/zh-tw/posts/art478-%E8%B1%86%E8%85%90%E5%A1%8A%E6%96%87%E7%AB%A0%E6%80%9D%E8%80%83/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/series/%E8%B1%86%E8%85%90%E5%A1%8A/"},{"revision":"083a0203619cc6108a8bd0a6ee2829d7","url":"https://laplus3667.github.io/zh-tw/posts/art001-guidance/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/tags/%E9%82%8F%E8%BC%AF%E6%B5%81/"},{"revision":"8576ec274c98b3831668a172fa632d80","url":"https://laplus3667.github.io/zh-tw/about/"},{"revision":"0375f517b64f0c8f0d42662c00db4a77","url":"https://laplus3667.github.io/zh-tw/posts/mur-%E5%AD%B8%E7%BF%92%E7%90%86%E8%AB%96%E5%B7%A5%E5%85%B7%E7%AE%B1/"},{"revision":"c6f21c7d5bc53efee20f426b5e3b9f31","url":"https://laplus3667.github.io/zh-tw/posts/avm001-%E9%9A%A8%E6%99%82%E6%9C%89%E6%95%88%E7%9F%A9%E9%99%A3%E8%BF%B4%E6%AD%B8%E5%88%86%E6%9E%90/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/series/%E9%9A%A8%E6%99%82%E6%9C%89%E6%95%88%E7%9F%A9%E9%99%A3%E8%BF%B4%E6%AD%B8/"},{"revision":"794ab100fbd5eeeaf1d83e1200ca2d81","url":"https://laplus3667.github.io/zh-tw/posts/gfh005-hedge%E9%81%A9%E6%87%89%E6%80%A7%E5%88%9D%E6%8E%A2/"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/series/%E6%A8%B9%E7%B1%AC%E5%85%AC%E5%B9%B3%E6%80%A7%E7%AE%97%E6%B3%95/"},{"revision":"97e8cbf2af64d3c7c2837d45345bc9be","url":"https://laplus3667.github.io/zh-tw/posts/gfh004-%E9%9A%A8%E6%99%82%E7%BE%A4%E9%AB%94%E5%85%AC%E5%B9%B3%E7%9A%84%E8%90%BD%E5%B7%AE%E5%88%86%E6%9E%90/"},{"revision":"ad9cab0209441ad80d641b7b9bc34b09","url":"https://laplus3667.github.io/zh-tw/posts/gfh003-%E8%A1%8C%E5%8B%95%E5%B0%B1%E6%98%AF%E5%8F%83%E6%95%B8-%E6%90%8D%E5%A4%B1%E5%B0%B1%E6%98%AF%E8%84%88%E7%B5%A1/"},{"revision":"75573ea8022a1a23370a8fbe4cff390d","url":"https://laplus3667.github.io/zh-tw/posts/gfh002-%E5%AF%A6%E8%B8%90%E7%BE%A4%E9%AB%94%E5%85%AC%E5%B9%B3%E6%80%A7%E4%BB%A5%E6%A9%9F%E6%9C%83%E5%9D%87%E7%AD%89/"},{"revision":"539b11126c86c039411d592ece5e2c61","url":"https://laplus3667.github.io/zh-tw/posts/gfh001-%E6%A8%B9%E7%B1%AC%E5%85%AC%E5%B9%B3%E7%AE%97%E6%B3%95/"},{"revision":"68c608ad8e6e222c34de5d3f3282091f","url":"https://laplus3667.github.io/zh-tw/archives/"},{"revision":1644874405,"url":"https://laplus3667.github.io/en/categories/"},{"revision":"6d99026b9e19e4fa43d5aadf147c7176","url":"https://laplus3667.github.io/zh-tw/contact/"},{"revision":"db9c7cbc7ea39f900c5763526a87142d","url":"https://laplus3667.github.io/zh-tw/faq/"},{"revision":1644874405,"url":"https://laplus3667.github.io/en/"},{"revision":"99164aa93168970c88f60ddb5e9971aa","url":"https://laplus3667.github.io/zh-tw/offline/"},{"revision":"e70fff4f74e107cdcde5c9e2abcfc149","url":"https://laplus3667.github.io/zh-tw/search/"},{"revision":1644874405,"url":"https://laplus3667.github.io/en/series/"},{"revision":1644874405,"url":"https://laplus3667.github.io/en/tags/"},{"revision":1644874405,"url":"https://laplus3667.github.io/en/manifest.json"},{"revision":1644874405,"url":"https://laplus3667.github.io/zh-tw/manifest.json"}]');
const assets = JSON.parse('[{"revision":null,"url":"https://laplus3667.github.io/css/main.min.50d3f831a48e40ca2620131b24ab2caed2073d780ee4728b67e104e72c62026e.css"},{"revision":null,"url":"https://laplus3667.github.io/js/main.min.bcf31478de97889b506ca8e011fca0740431cb3226ab4e91c494e7120ce4abc3.js"},{"revision":null,"url":"https://laplus3667.github.io/js/icons.min.a35670f2f90c398e5ee5c8e509b428fae75aa2746854cee10b60794633076859.js"},{"revision":"66b4531fb204a8de9b7665c34340d4c2","url":"/.DS_Store"},{"revision":"e7e30ba1518d5c7e41a4ba56813cad48","url":"/images/icons/favicon.ico"},{"revision":"30f3e9c9333635244a529e1f8a278669","url":"/images/icons/icon-144x144.png"},{"revision":"1e8e6dc66fd1f03f2f275d163e281b8c","url":"/images/icons/icon-168x168.png"},{"revision":"5675e36f11a529bcbecb4e1fae90c416","url":"/images/icons/icon-192x192.png"},{"revision":"8dd2e5f3978781fa5f222c21167ca2c6","url":"/images/icons/icon-256x256.png"},{"revision":"ce9105554973230bbdbaf19bde9ee49f","url":"/images/icons/icon-384x384.png"},{"revision":"8e287e09e7e234aac91f59d3272c3aaa","url":"/images/icons/icon-48x48.png"},{"revision":"aca31f41b58d17e6de62ffd336e4f2b7","url":"/images/icons/icon-512x512.png"},{"revision":"574cdfc8581837210bd85d4df5e44c73","url":"/images/icons/icon-72x72.png"},{"revision":"c2b414b77255f6d67a985cf549a37def","url":"/images/icons/icon-96x96.png"},{"revision":"b9b2d6255c89c8b3724d487450a5fae0","url":"/images/lanlan.jpg"},{"revision":"5591cb4667322ee3e8e2789ce673355b","url":"/images/laplus.webp"},{"revision":"2aadfa4e096b8e591bdccb77ec851550","url":"/images/logo.webp"},{"revision":"78cb0d82a37cd4aeac7b65556172622a","url":"/images/markdown.png"},{"revision":"afb8b1a69991f0665ef9be0410584531","url":"/images/profile.webp"},{"revision":"add64ebc5331a30372df599df3f203fa","url":"/images/reward/alipay.png"},{"revision":"49e2406a96cfe50f82a60b07f2f028f6","url":"/images/reward/wechat.png"},{"revision":"81d1ef9c2180622aebbe7845dd404165","url":"/images/shortcode.png"}]');
const multilingual = true;
const config = {
    version: 1644874405,
    multilingual: true,
    pages: pages,
    assets: assets
};

;
(()=>{"use strict";var e={895:()=>{try{self["workbox:cacheable-response:6.4.1"]&&_()}catch(e){}},913:()=>{try{self["workbox:core:6.4.1"]&&_()}catch(e){}},550:()=>{try{self["workbox:expiration:6.4.1"]&&_()}catch(e){}},977:()=>{try{self["workbox:precaching:6.4.1"]&&_()}catch(e){}},80:()=>{try{self["workbox:routing:6.4.1"]&&_()}catch(e){}},873:()=>{try{self["workbox:strategies:6.4.1"]&&_()}catch(e){}}},t={};function s(n){var a=t[n];if(void 0!==a)return a.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}(()=>{s(913);const e=(e,...t)=>{let s=e;return t.length>0&&(s+=` :: ${JSON.stringify(t)}`),s};class t extends Error{constructor(t,s){super(e(t,s)),this.name=t,this.details=s}}const n=new Set;const a={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},r=e=>[a.prefix,e,a.suffix].filter((e=>e&&e.length>0)).join("-"),i=e=>e||r(a.googleAnalytics),c=e=>e||r(a.precache),o=()=>a.prefix,h=e=>e||r(a.runtime),l=()=>a.suffix;function u(e,t){const s=new URL(e);for(const e of t)s.searchParams.delete(e);return s.href}let d;function f(e){e.then((()=>{}))}class p{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}const g=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");function w(e,t){const s=t();return e.waitUntil(s),s}const m={get googleAnalytics(){return i()},get precache(){return c()},get prefix(){return o()},get runtime(){return h()},get suffix(){return l()}};async function y(e,s){let n=null;if(e.url){n=new URL(e.url).origin}if(n!==self.location.origin)throw new t("cross-origin-copy-response",{origin:n});const a=e.clone(),r={headers:new Headers(a.headers),status:a.status,statusText:a.statusText},i=s?s(r):r,c=function(){if(void 0===d){const e=new Response("");if("body"in e)try{new Response(e.body),d=!0}catch(e){d=!1}d=!1}return d}()?a.body:await a.blob();return new Response(c,i)}s(80);const _=e=>e&&"object"==typeof e?e:{handle:e};class v{constructor(e,t,s="GET"){this.handler=_(t),this.match=e,this.method=s}setCatchHandler(e){this.catchHandler=_(e)}}class b extends v{constructor(e,t,s){super((({url:t})=>{const s=e.exec(t.href);if(s&&(t.origin===location.origin||0===s.index))return s.slice(1)}),t,s)}}class R{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,s=this.handleRequest({request:t,event:e});s&&e.respondWith(s)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;0;const s=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const s=new Request(...t);return this.handleRequest({request:s,event:e})})));e.waitUntil(s),e.ports&&e.ports[0]&&s.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http"))return void 0;const n=s.origin===location.origin,{params:a,route:r}=this.findMatchingRoute({event:t,request:e,sameOrigin:n,url:s});let i=r&&r.handler;const c=e.method;if(!i&&this._defaultHandlerMap.has(c)&&(i=this._defaultHandlerMap.get(c)),!i)return void 0;let o;try{o=i.handle({url:s,request:e,event:t,params:a})}catch(e){o=Promise.reject(e)}const h=r&&r.catchHandler;return o instanceof Promise&&(this._catchHandler||h)&&(o=o.catch((async n=>{if(h){0;try{return await h.handle({url:s,request:e,event:t,params:a})}catch(e){e instanceof Error&&(n=e)}}if(this._catchHandler)return this._catchHandler.handle({url:s,request:e,event:t});throw n}))),o}findMatchingRoute({url:e,sameOrigin:t,request:s,event:n}){const a=this._routes.get(s.method)||[];for(const r of a){let a;const i=r.match({url:e,sameOrigin:t,request:s,event:n});if(i)return a=i,(Array.isArray(a)&&0===a.length||i.constructor===Object&&0===Object.keys(i).length||"boolean"==typeof i)&&(a=void 0),{route:r,params:a}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,_(e))}setCatchHandler(e){this._catchHandler=_(e)}registerRoute(e){this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new t("unregister-route-but-not-found-with-method",{method:e.method});const s=this._routes.get(e.method).indexOf(e);if(!(s>-1))throw new t("unregister-route-route-not-registered");this._routes.get(e.method).splice(s,1)}}let x;const C=()=>(x||(x=new R,x.addFetchListener(),x.addCacheListener()),x);function L(e,s,n){let a;if("string"==typeof e){const t=new URL(e,location.href);0;a=new v((({url:e})=>e.href===t.href),s,n)}else if(e instanceof RegExp)a=new b(e,s,n);else if("function"==typeof e)a=new v(e,s,n);else{if(!(e instanceof v))throw new t("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=e}return C().registerRoute(a),a}s(873);function E(e){return"string"==typeof e?new Request(e):e}class q{constructor(e,t){this._cacheKeys={},Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new p,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:s}=this;let n=E(e);if("navigate"===n.mode&&s instanceof FetchEvent&&s.preloadResponse){const e=await s.preloadResponse;if(e)return e}const a=this.hasCallback("fetchDidFail")?n.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))n=await e({request:n.clone(),event:s})}catch(e){if(e instanceof Error)throw new t("plugin-error-request-will-fetch",{thrownErrorMessage:e.message})}const r=n.clone();try{let e;e=await fetch(n,"navigate"===n.mode?void 0:this._strategy.fetchOptions);for(const t of this.iterateCallbacks("fetchDidSucceed"))e=await t({event:s,request:r,response:e});return e}catch(e){throw a&&await this.runCallbacks("fetchDidFail",{error:e,event:s,originalRequest:a.clone(),request:r.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),s=t.clone();return this.waitUntil(this.cachePut(e,s)),t}async cacheMatch(e){const t=E(e);let s;const{cacheName:n,matchOptions:a}=this._strategy,r=await this.getCacheKey(t,"read"),i=Object.assign(Object.assign({},a),{cacheName:n});s=await caches.match(r,i);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await e({cacheName:n,matchOptions:a,cachedResponse:s,request:r,event:this.event})||void 0;return s}async cachePut(e,s){const a=E(e);var r;await(r=0,new Promise((e=>setTimeout(e,r))));const i=await this.getCacheKey(a,"write");if(!s)throw new t("cache-put-with-no-response",{url:g(i.url)});const c=await this._ensureResponseSafeToCache(s);if(!c)return!1;const{cacheName:o,matchOptions:h}=this._strategy,l=await self.caches.open(o),d=this.hasCallback("cacheDidUpdate"),f=d?await async function(e,t,s,n){const a=u(t.url,s);if(t.url===a)return e.match(t,n);const r=Object.assign(Object.assign({},n),{ignoreSearch:!0}),i=await e.keys(t,r);for(const t of i)if(a===u(t.url,s))return e.match(t,n)}(l,i.clone(),["__WB_REVISION__"],h):null;try{await l.put(i,d?c.clone():c)}catch(e){if(e instanceof Error)throw"QuotaExceededError"===e.name&&await async function(){for(const e of n)await e()}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:o,oldResponse:f,newResponse:c.clone(),request:i,event:this.event});return!0}async getCacheKey(e,t){const s=`${e.url} | ${t}`;if(!this._cacheKeys[s]){let n=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))n=E(await e({mode:t,request:n,event:this.event,params:this.params}));this._cacheKeys[s]=n}return this._cacheKeys[s]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const s of this.iterateCallbacks(e))await s(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const s=this._pluginStateMap.get(t),n=n=>{const a=Object.assign(Object.assign({},n),{state:s});return t[e](a)};yield n}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,s=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,s=!0,!t)break;return s||t&&200!==t.status&&(t=void 0),t}}class U{constructor(e={}){this.cacheName=h(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,s="string"==typeof e.request?new Request(e.request):e.request,n="params"in e?e.params:void 0,a=new q(this,{event:t,request:s,params:n}),r=this._getResponse(a,s,t);return[r,this._awaitComplete(r,a,s,t)]}async _getResponse(e,s,n){let a;await e.runCallbacks("handlerWillStart",{event:n,request:s});try{if(a=await this._handle(s,e),!a||"error"===a.type)throw new t("no-response",{url:s.url})}catch(t){if(t instanceof Error)for(const r of e.iterateCallbacks("handlerDidError"))if(a=await r({error:t,event:n,request:s}),a)break;if(!a)throw t}for(const t of e.iterateCallbacks("handlerWillRespond"))a=await t({event:n,request:s,response:a});return a}async _awaitComplete(e,t,s,n){let a,r;try{a=await e}catch(r){}try{await t.runCallbacks("handlerDidRespond",{event:n,request:s,response:a}),await t.doneWaiting()}catch(e){e instanceof Error&&(r=e)}if(await t.runCallbacks("handlerDidComplete",{event:n,request:s,response:a,error:r}),t.destroy(),r)throw r}}class D extends U{async _handle(e,s){let n,a=await s.cacheMatch(e);if(a)0;else{0;try{a=await s.fetchAndCachePut(e)}catch(e){e instanceof Error&&(n=e)}0}if(!a)throw new t("no-response",{url:e.url,error:n});return a}}const k={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};s(895);class N{constructor(e={}){this._statuses=e.statuses,this._headers=e.headers}isResponseCacheable(e){let t=!0;return this._statuses&&(t=this._statuses.includes(e.status)),this._headers&&t&&(t=Object.keys(this._headers).some((t=>e.headers.get(t)===this._headers[t]))),t}}class T{constructor(e){this.cacheWillUpdate=async({response:e})=>this._cacheableResponse.isResponseCacheable(e)?e:null,this._cacheableResponse=new N(e)}}let I,K;const P=new WeakMap,M=new WeakMap,A=new WeakMap,O=new WeakMap,S=new WeakMap;let W={get(e,t,s){if(e instanceof IDBTransaction){if("done"===t)return M.get(e);if("objectStoreNames"===t)return e.objectStoreNames||A.get(e);if("store"===t)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return H(e[t])},set:(e,t,s)=>(e[t]=s,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function B(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(K||(K=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(F(this),t),H(P.get(this))}:function(...t){return H(e.apply(F(this),t))}:function(t,...s){const n=e.call(F(this),t,...s);return A.set(n,t.sort?t.sort():[t]),H(n)}}function j(e){return"function"==typeof e?B(e):(e instanceof IDBTransaction&&function(e){if(M.has(e))return;const t=new Promise(((t,s)=>{const n=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",r),e.removeEventListener("abort",r)},a=()=>{t(),n()},r=()=>{s(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",a),e.addEventListener("error",r),e.addEventListener("abort",r)}));M.set(e,t)}(e),t=e,(I||(I=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>t instanceof e))?new Proxy(e,W):e);var t}function H(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,s)=>{const n=()=>{e.removeEventListener("success",a),e.removeEventListener("error",r)},a=()=>{t(H(e.result)),n()},r=()=>{s(e.error),n()};e.addEventListener("success",a),e.addEventListener("error",r)}));return t.then((t=>{t instanceof IDBCursor&&P.set(t,e)})).catch((()=>{})),S.set(t,e),t}(e);if(O.has(e))return O.get(e);const t=j(e);return t!==e&&(O.set(e,t),S.set(t,e)),t}const F=e=>S.get(e);const $=["get","getKey","getAll","getAllKeys","count"],V=["put","add","delete","clear"],G=new Map;function Q(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(G.get(t))return G.get(t);const s=t.replace(/FromIndex$/,""),n=t!==s,a=V.includes(s);if(!(s in(n?IDBIndex:IDBObjectStore).prototype)||!a&&!$.includes(s))return;const r=async function(e,...t){const r=this.transaction(e,a?"readwrite":"readonly");let i=r.store;return n&&(i=i.index(t.shift())),(await Promise.all([i[s](...t),a&&r.done]))[0]};return G.set(t,r),r}W=(e=>({...e,get:(t,s,n)=>Q(t,s)||e.get(t,s,n),has:(t,s)=>!!Q(t,s)||e.has(t,s)}))(W);s(550);const J="cache-entries",z=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class X{constructor(e){this._db=null,this._cacheName=e}_upgradeDb(e){const t=e.createObjectStore(J,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1})}_upgradeDbAndDeleteOldDbs(e){this._upgradeDb(e),this._cacheName&&function(e,{blocked:t}={}){const s=indexedDB.deleteDatabase(e);t&&s.addEventListener("blocked",(()=>t())),H(s).then((()=>{}))}(this._cacheName)}async setTimestamp(e,t){const s={url:e=z(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)},n=(await this.getDb()).transaction(J,"readwrite",{durability:"relaxed"});await n.store.put(s),await n.done}async getTimestamp(e){const t=await this.getDb(),s=await t.get(J,this._getId(e));return null==s?void 0:s.timestamp}async expireEntries(e,t){const s=await this.getDb();let n=await s.transaction(J).store.index("timestamp").openCursor(null,"prev");const a=[];let r=0;for(;n;){const s=n.value;s.cacheName===this._cacheName&&(e&&s.timestamp<e||t&&r>=t?a.push(n.value):r++),n=await n.continue()}const i=[];for(const e of a)await s.delete(J,e.id),i.push(e.url);return i}_getId(e){return this._cacheName+"|"+z(e)}async getDb(){return this._db||(this._db=await function(e,t,{blocked:s,upgrade:n,blocking:a,terminated:r}={}){const i=indexedDB.open(e,t),c=H(i);return n&&i.addEventListener("upgradeneeded",(e=>{n(H(i.result),e.oldVersion,e.newVersion,H(i.transaction))})),s&&i.addEventListener("blocked",(()=>s())),c.then((e=>{r&&e.addEventListener("close",(()=>r())),a&&e.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),c}("workbox-expiration",1,{upgrade:this._upgradeDbAndDeleteOldDbs.bind(this)})),this._db}}class Y{constructor(e,t={}){this._isRunning=!1,this._rerunRequested=!1,this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new X(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),s=await self.caches.open(this._cacheName);for(const e of t)await s.delete(e,this._matchOptions);this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,f(this.expireEntries()))}async updateTimestamp(e){await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){const t=await this._timestampModel.getTimestamp(e),s=Date.now()-1e3*this._maxAgeSeconds;return void 0===t||t<s}return!1}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}s(977);function Z(e){if(!e)throw new t("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:s,url:n}=e;if(!n)throw new t("add-to-cache-list-unexpected-type",{entry:e});if(!s){const e=new URL(n,location.href);return{cacheKey:e.href,url:e.href}}const a=new URL(n,location.href),r=new URL(n,location.href);return a.searchParams.set("__WB_REVISION__",s),{cacheKey:a.href,url:r.href}}class ee{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:s})=>{if("install"===e.type&&t&&t.originalRequest&&t.originalRequest instanceof Request){const e=t.originalRequest.url;s?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return s}}}class te{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const s=(null==t?void 0:t.cacheKey)||this._precacheController.getCacheKeyForURL(e.url);return s?new Request(s,{headers:e.headers}):e},this._precacheController=e}}class se extends U{constructor(e={}){e.cacheName=c(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(se.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const s=await t.cacheMatch(e);return s||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,s){let n;const a=s.params||{};if(!this._fallbackToNetwork)throw new t("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{0;const t=a.integrity,r=e.integrity,i=!r||r===t;if(n=await s.fetch(new Request(e,{integrity:r||t})),t&&i){this._useDefaultCacheabilityPluginIfNeeded();await s.cachePut(e,n.clone());0}}return n}async _handleInstall(e,s){this._useDefaultCacheabilityPluginIfNeeded();const n=await s.fetch(e);if(!await s.cachePut(e,n.clone()))throw new t("bad-precaching-response",{url:e.url,status:n.status});return n}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[s,n]of this.plugins.entries())n!==se.copyRedirectedCacheableResponsesPlugin&&(n===se.defaultPrecacheCacheabilityPlugin&&(e=s),n.cacheWillUpdate&&t++);0===t?this.plugins.push(se.defaultPrecacheCacheabilityPlugin):t>1&&null!==e&&this.plugins.splice(e,1)}}se.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:e})=>!e||e.status>=400?null:e},se.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:e})=>e.redirected?await y(e):e};class ne{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:s=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new se({cacheName:c(e),plugins:[...t,new te({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){const s=[];for(const n of e){"string"==typeof n?s.push(n):n&&void 0===n.revision&&s.push(n.url);const{cacheKey:e,url:a}=Z(n),r="string"!=typeof n&&n.revision?"reload":"default";if(this._urlsToCacheKeys.has(a)&&this._urlsToCacheKeys.get(a)!==e)throw new t("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(a),secondEntry:e});if("string"!=typeof n&&n.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==n.integrity)throw new t("add-to-cache-list-conflicting-integrities",{url:a});this._cacheKeysToIntegrities.set(e,n.integrity)}if(this._urlsToCacheKeys.set(a,e),this._urlsToCacheModes.set(a,r),s.length>0){const e=`Workbox is precaching URLs without revision info: ${s.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(e)}}}install(e){return w(e,(async()=>{const t=new ee;this.strategy.plugins.push(t);for(const[t,s]of this._urlsToCacheKeys){const n=this._cacheKeysToIntegrities.get(s),a=this._urlsToCacheModes.get(t),r=new Request(t,{integrity:n,cache:a,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:s},request:r,event:e}))}const{updatedURLs:s,notUpdatedURLs:n}=t;return{updatedURLs:s,notUpdatedURLs:n}}))}activate(e){return w(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),s=new Set(this._urlsToCacheKeys.values()),n=[];for(const a of t)s.has(a.url)||(await e.delete(a),n.push(a.url));return{deletedURLs:n}}))}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,s=this.getCacheKeyForURL(t);if(s){return(await self.caches.open(this.strategy.cacheName)).match(s)}}createHandlerBoundToURL(e){const s=this.getCacheKeyForURL(e);if(!s)throw new t("non-precached-url",{url:e});return t=>(t.request=new Request(e),t.params=Object.assign({cacheKey:s},t.params),this.strategy.handle(t))}}let ae;const re=()=>(ae||(ae=new ne),ae);class ie extends v{constructor(e,t){super((({request:s})=>{const n=e.getURLsToCacheKeys();for(const a of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:s="index.html",cleanURLs:n=!0,urlManipulation:a}={}){const r=new URL(e,location.href);r.hash="",yield r.href;const i=function(e,t=[]){for(const s of[...e.searchParams.keys()])t.some((e=>e.test(s)))&&e.searchParams.delete(s);return e}(r,t);if(yield i.href,s&&i.pathname.endsWith("/")){const e=new URL(i.href);e.pathname+=s,yield e.href}if(n){const e=new URL(i.href);e.pathname+=".html",yield e.href}if(a){const e=a({url:r});for(const t of e)yield t.href}}(s.url,t)){const t=n.get(a);if(t){return{cacheKey:t,integrity:e.getIntegrityForCacheKey(t)}}}}),e.strategy)}}function ce(e){return re().matchPrecache(e)}function oe(e,t){!function(e){re().precache(e)}(e),function(e){const t=re();L(new ie(t,e))}(t)}var he,le=function(e,t,s,n){return new(s||(s=Promise))((function(a,r){function i(e){try{o(n.next(e))}catch(e){r(e)}}function c(e){try{o(n.throw(e))}catch(e){r(e)}}function o(e){var t;e.done?a(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(i,c)}o((n=n.apply(e,t||[])).next())}))};self.addEventListener("activate",(()=>self.clients.claim())),self.addEventListener("install",(function(e){self.skipWaiting()})),self.addEventListener("activate",(e=>{const t=c();e.waitUntil((async(e,t="-precache-")=>{const s=(await self.caches.keys()).filter((s=>s.includes(t)&&s.includes(self.registration.scope)&&s!==e));return await Promise.all(s.map((e=>self.caches.delete(e)))),s})(t).then((e=>{})))})),he=({request:e})=>le(void 0,void 0,void 0,(function*(){if("document"===e.destination){if(config.multilingual){var t="";const s=new URL(e.url).pathname.split("/");return s.length>1&&(t="/"+s[1]+"/"),ce(t+"offline/")}return ce("/offline/")}return Response.error()})),C().setCatchHandler(he),L((({request:e})=>"navigate"===e.mode),new class extends U{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(k)}async _handle(e,s){const n=s.fetchAndCachePut(e).catch((()=>{}));let a,r=await s.cacheMatch(e);if(r)0;else{0;try{r=await n}catch(e){e instanceof Error&&(a=e)}}if(!r)throw new t("no-response",{url:e.url,error:a});return r}}({cacheName:m.precache,plugins:[new T({statuses:[200]})]})),L((({request:e})=>"style"===e.destination||"script"===e.destination||"worker"===e.destination),new D({cacheName:m.precache,plugins:[new T({statuses:[200]})]})),L((({request:e})=>"image"===e.destination),new D({cacheName:m.precache,plugins:[new T({statuses:[200]}),new class{constructor(e={}){this.cachedResponseWillBeUsed=async({event:e,request:t,cacheName:s,cachedResponse:n})=>{if(!n)return null;const a=this._isResponseDateFresh(n),r=this._getCacheExpiration(s);f(r.expireEntries());const i=r.updateTimestamp(t.url);if(e)try{e.waitUntil(i)}catch(e){0}return a?n:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{const s=this._getCacheExpiration(e);await s.updateTimestamp(t.url),await s.expireEntries()},this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&function(e){n.add(e)}((()=>this.deleteCacheAndMetadata()))}_getCacheExpiration(e){if(e===h())throw new t("expire-custom-caches-only");let s=this._cacheExpirations.get(e);return s||(s=new Y(e,this._config),this._cacheExpirations.set(e,s)),s}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);if(null===t)return!0;return t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),s=new Date(t).getTime();return isNaN(s)?null:s}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}({maxEntries:50,maxAgeSeconds:2592e3})]})),oe(config.pages),oe(config.assets)})()})();